<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Projects on My Notebook</title>
    <link>https://r0ymanesco.github.io/my-notes/tags/projects/</link>
    <description>Recent content in Projects on My Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://r0ymanesco.github.io/my-notes/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DeepJSCC Stream</title>
      <link>https://r0ymanesco.github.io/my-notes/projects/deepjscc_stream/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://r0ymanesco.github.io/my-notes/projects/deepjscc_stream/</guid>
      <description>Using transformers to autoregressively predict the next codeword Poor results The encoding/decoding approach used so far has not worked:
The implementation that uses 2D transformers eventually diverged and crashed. The impelmentation using VTC transformers stopped improving and produced bad results, weaker than the 2D transformers model. However, the VCT approach seems to be more promising as the transformer video compression paper (VCT, Mentzer) has shown it can work. It is also much faster to train.</description>
    </item>
    
    <item>
      <title>Goal-oriented Coding</title>
      <link>https://r0ymanesco.github.io/my-notes/projects/goal_oriented_coding/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://r0ymanesco.github.io/my-notes/projects/goal_oriented_coding/</guid>
      <description>Project goal This project aims to leverage universal quantisation for goal-oriented coding. It is closely related to the rate-distortion-perception , as it was shown that under perfect perceptual constraint, a stochastic encoder/decoder can improve the distortion.
Applications A potential application for universal quantisation in compression is in diffusion models. Diffusion models essentially compute the VAE objective for every time step (usually using randomly chosen time step) to guide the decoder from isotropic noise to an image sample.</description>
    </item>
    
    <item>
      <title>Graph Coding</title>
      <link>https://r0ymanesco.github.io/my-notes/projects/graph_coding/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://r0ymanesco.github.io/my-notes/projects/graph_coding/</guid>
      <description>Graph Coding Rewrite paper from the perspective of source coding and planning Motivate each solution as a special cost structure of a more general definition Look into source coding of interesting sources, for example, AoI source coding. Then highlight the differences. Goal oriented compression (source coding) Most of these works are still considering single letter reconstruction. We are considering reconstruction over multiple time steps, or equivalently, reconstruction cost minimization. This is more general since the distortion/cost is more arbitrary.</description>
    </item>
    
    <item>
      <title>Lime SDR</title>
      <link>https://r0ymanesco.github.io/my-notes/projects/lime_sdr/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://r0ymanesco.github.io/my-notes/projects/lime_sdr/</guid>
      <description>Move away from GNURadio GNURadio is too hard to maintain. It has too many dependencies and is hard to write modules for. It would be better to simplify to just a Python script with SoapySDR interfaces.
Rust implementation The SoapySDR C++ library has Rust bindings, which can be used to set the LimeSDR parameters. Rust should provide much better efficiency compared to Python, although Python might be easier to for experimentation.</description>
    </item>
    
  </channel>
</rss>
